diff --git a/node_modules/matrix-react-sdk/res/css/views/elements/_TooltipButton.pcss b/node_modules/matrix-react-sdk/res/css/views/elements/_TooltipButton.pcss
index 5b7c0ce..1a494ac 100644
--- a/node_modules/matrix-react-sdk/res/css/views/elements/_TooltipButton.pcss
+++ b/node_modules/matrix-react-sdk/res/css/views/elements/_TooltipButton.pcss
@@ -15,6 +15,15 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
+/* :TCHAP: tooltips in bubble layout are not visible enough : the bubble backgroud is not white. */
+.mx_EventTile[data-layout="bubble"] {
+    .mx_TooltipButton {
+        color: var(--timeline-text-color);
+        border-color: var(--timeline-text-color);
+    }
+}
+/* end :TCHAP: */
+
 .mx_TooltipButton {
     display: inline-block;
     width: 11px;
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/UnknownBody.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/UnknownBody.tsx
index cd1f06a..434c949 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/UnknownBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/UnknownBody.tsx
@@ -17,13 +17,26 @@ limitations under the License.
 
 import React, { forwardRef } from "react";
 import { MatrixEvent } from "matrix-js-sdk/src/matrix";
-
+import { _t } from 'matrix-react-sdk/src/languageHandler'; // :TCHAP:
 interface IProps {
     mxEvent: MatrixEvent;
     children?: React.ReactNode;
 }
 
 export default forwardRef(({ mxEvent, children }: IProps, ref: React.RefObject<HTMLDivElement>) => {
+    // :TCHAP: user-friendly message in the case of lost keys
+    const content = mxEvent.getContent();
+    if (content.msgtype && content.msgtype === "m.bad.encrypted") {
+        const userFriendlyText = _t("Decryption fail: Please open Tchap on an other connected device to allow key sharing.");
+        return (
+            <div className="mx_UnknownBody" ref={ref}>
+                { userFriendlyText }
+                { children }
+            </div>
+        );
+    }
+    // end :TCHAP:
+
     const text = mxEvent.getContent().body;
     return (
         <div className="mx_UnknownBody" ref={ref}>
diff --git a/node_modules/matrix-react-sdk/src/components/views/rooms/EventTile.tsx b/node_modules/matrix-react-sdk/src/components/views/rooms/EventTile.tsx
index 654cc80..2548147 100644
--- a/node_modules/matrix-react-sdk/src/components/views/rooms/EventTile.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/rooms/EventTile.tsx
@@ -84,6 +84,7 @@ import { useTooltip } from "../../../utils/useTooltip";
 import { ShowThreadPayload } from "../../../dispatcher/payloads/ShowThreadPayload";
 import { isLocalRoom } from '../../../utils/localRoom/isLocalRoom';
 import { ElementCall } from "../../../models/Call";
+import { TchapKeyRequestInfo } from "../../../../../../src/components/views/rooms/TchapKeyRequestInfo"; // :TCHAP:
 
 export type GetRelationsForEvent = (eventId: string, relationType: string, eventType: string) => Relations;
 
@@ -1491,7 +1492,12 @@ export class UnwrappedEventTile extends React.Component<IProps, IState> {
                                 onHeightChanged: this.props.onHeightChanged,
                                 permalinkCreator: this.props.permalinkCreator,
                             }, this.context.showHiddenEvents) }
-                            { keyRequestInfo }
+                            <TchapKeyRequestInfo // :TCHAP:
+                                previouslyRequestedKeys={this.state.previouslyRequestedKeys}
+                                onRequestKeysClick={this.onRequestKeysClick}
+                                isEncryptionFailure={isEncryptionFailure}
+                                isRedacted={isRedacted}>
+                            </TchapKeyRequestInfo>
                             { actionBar }
                             { this.props.layout === Layout.IRC && <>
                                 { reactionsRow }
