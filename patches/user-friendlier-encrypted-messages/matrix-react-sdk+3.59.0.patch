diff --git a/node_modules/matrix-react-sdk/res/css/views/elements/_TooltipButton.pcss b/node_modules/matrix-react-sdk/res/css/views/elements/_TooltipButton.pcss
index 5b7c0ce..1a494ac 100644
--- a/node_modules/matrix-react-sdk/res/css/views/elements/_TooltipButton.pcss
+++ b/node_modules/matrix-react-sdk/res/css/views/elements/_TooltipButton.pcss
@@ -15,6 +15,15 @@ See the License for the specific language governing permissions and
 limitations under the License.
 */
 
+/* :TCHAP: tooltips in bubble layout are not visible enough : the bubble backgroud is not white. */
+.mx_EventTile[data-layout="bubble"] {
+    .mx_TooltipButton {
+        color: var(--timeline-text-color);
+        border-color: var(--timeline-text-color);
+    }
+}
+/* end :TCHAP: */
+
 .mx_TooltipButton {
     display: inline-block;
     width: 11px;
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/UnknownBody.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/UnknownBody.tsx
index cd1f06a..434c949 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/UnknownBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/UnknownBody.tsx
@@ -17,13 +17,26 @@ limitations under the License.
 
 import React, { forwardRef } from "react";
 import { MatrixEvent } from "matrix-js-sdk/src/matrix";
-
+import { _t } from 'matrix-react-sdk/src/languageHandler'; // :TCHAP:
 interface IProps {
     mxEvent: MatrixEvent;
     children?: React.ReactNode;
 }
 
 export default forwardRef(({ mxEvent, children }: IProps, ref: React.RefObject<HTMLDivElement>) => {
+    // :TCHAP: user-friendly message in the case of lost keys
+    const content = mxEvent.getContent();
+    if (content.msgtype && content.msgtype === "m.bad.encrypted") {
+        const userFriendlyText = _t("Decryption fail: Please open Tchap on an other connected device to allow key sharing.");
+        return (
+            <div className="mx_UnknownBody" ref={ref}>
+                { userFriendlyText }
+                { children }
+            </div>
+        );
+    }
+    // end :TCHAP:
+
     const text = mxEvent.getContent().body;
     return (
         <div className="mx_UnknownBody" ref={ref}>
diff --git a/node_modules/matrix-react-sdk/src/components/views/rooms/EventTile.tsx b/node_modules/matrix-react-sdk/src/components/views/rooms/EventTile.tsx
index 654cc80..b88a304 100644
--- a/node_modules/matrix-react-sdk/src/components/views/rooms/EventTile.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/rooms/EventTile.tsx
@@ -16,6 +16,7 @@ limitations under the License.
 */
 
 import React, { createRef, forwardRef, MouseEvent, RefObject } from 'react';
+import { ComponentType } from 'react'; // :TCHAP:
 import classNames from "classnames";
 import { EventType, MsgType } from "matrix-js-sdk/src/@types/event";
 import { EventStatus, MatrixEvent, MatrixEventEvent } from "matrix-js-sdk/src/models/event";
@@ -84,6 +85,7 @@ import { useTooltip } from "../../../utils/useTooltip";
 import { ShowThreadPayload } from "../../../dispatcher/payloads/ShowThreadPayload";
 import { isLocalRoom } from '../../../utils/localRoom/isLocalRoom';
 import { ElementCall } from "../../../models/Call";
+import Modal from '../../../Modal'; // :TCHAP:
 
 export type GetRelationsForEvent = (eventId: string, relationType: string, eventType: string) => Relations;
 
@@ -754,6 +756,17 @@ export class UnwrappedEventTile extends React.Component<IProps, IState> {
         MatrixClientPeg.get().cancelAndResendEventRoomKeyRequest(this.props.mxEvent);
     };
 
+    // :TCHAP:
+    private onImportE2eKeysClicked = (): void => {
+        Modal.createDialogAsync(
+            import(
+                '../../../async-components/views/dialogs/security/ImportE2eKeysDialog'
+            ) as unknown as Promise<ComponentType<{}>>,
+            { matrixClient: MatrixClientPeg.get() },
+        );
+    };
+    // end :TCHAP:
+
     private onPermalinkClicked = e => {
         // This allows the permalink to be opened in a new tab/window or copied as
         // matrix.to, but also for it to enable routing within Element when clicked.
@@ -1151,23 +1164,38 @@ export class UnwrappedEventTile extends React.Component<IProps, IState> {
             <div className="mx_EventTile_keyRequestInfo_tooltip_contents">
                 <p>
                     { this.state.previouslyRequestedKeys ?
+                        /* :TCHAP: use "device" instead of "session"
                         _t('Your key share request has been sent - please check your other sessions ' +
                            'for key share requests.') :
                         _t('Key share requests are sent to your other sessions automatically. If you ' +
                            'rejected or dismissed the key share request on your other sessions, click ' +
                            'here to request the keys for this session again.')
+                        */
+                        _t("Your key share request has been sent - please check your other devices for key share requests.") :
+                        _t("Tchap Key share requests are sent to your other devices automatically. " +
+                          "If you rejected or dismissed the key share request on your other devices, click here to request the Tchap Keys again.")
+                        // end :TCHAP:
                     }
                 </p>
                 <p>
-                    { _t('If your other sessions do not have the key for this message you will not ' +
+                    {/* :TCHAP: use "device" instead of "session"
+                        _t('If your other sessions do not have the key for this message you will not ' +
                          'be able to decrypt them.')
+                      */
+                      _t("If your other devices do not have the key for this message, you will not be able to decrypt them.")
                     }
                 </p>
             </div>;
         const keyRequestInfoContent = this.state.previouslyRequestedKeys ?
-            _t('Key request sent.') :
+            // :TCHAP: better text
+            //_t('Key request sent.') :
+            _t('Request in progress...') :
+            // end :TCHAP:
             _t(
-                '<requestLink>Re-request encryption keys</requestLink> from your other sessions.',
+                // :TCHAP: better text
+                //'<requestLink>Re-request encryption keys</requestLink> from your other sessions.',
+                '<requestLink>Re-send a request to your other devices</requestLink>',
+                // end :TCHAP:
                 {},
                 {
                     'requestLink': (sub) =>
@@ -1182,9 +1210,31 @@ export class UnwrappedEventTile extends React.Component<IProps, IState> {
                 },
             );
 
+        // :TCHAP:
+        const importKeys = _t(
+            '<requestLink>Import from saved file</requestLink>',
+            {},
+            {
+                'requestLink': (sub) =>
+                    <AccessibleButton
+                        className="mx_EventTile_rerequestKeysCta"
+                        kind='link_inline'
+                        tabIndex={0}
+                        onClick={this.onImportE2eKeysClicked}
+                    >
+                        { sub }
+                    </AccessibleButton>,
+            },
+        );
+        // end :TCHAP:
+
         const keyRequestInfo = isEncryptionFailure && !isRedacted ?
             <div className="mx_EventTile_keyRequestInfo">
                 <span className="mx_EventTile_keyRequestInfo_text">
+                    {/** :TCHAP: */}
+                    { importKeys }
+                    <br />
+                    {/** end :TCHAP: */}
                     { keyRequestInfoContent }
                 </span>
                 <TooltipButton helpText={keyRequestHelpText} />
